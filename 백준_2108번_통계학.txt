#include <iostream>
using namespace std;

int arr[500001];
int arr_count[8001];

void heaptify(int value, int end) {
	arr[end] = value;
	while (end > 0) {
		int root = (end - 1) / 2;
		if (arr[end] > arr[root]) {
			int temp = arr[end];
			arr[end] = arr[root];
			arr[root] = temp;
			end = root;
		}
		else break;
	}
}

void sort(int end) {
	while (end > 0) {
		int value = arr[0];
		arr[0] = arr[end];
		arr[end] = value;
		end--;

		int root = 0;
		while (root <= end) {
			int child = root * 2 + 1;
			if (child > end) break;
			if (child + 1 <= end && arr[child + 1] > arr[child]) child++;
			if (arr[root] <= arr[child]) {
				int temp = arr[root];
				arr[root] = arr[child];
				arr[child] = temp;
				root = child;
			}
			else break;
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int N;
	cin >> N;
	double sum = 0;
	int max_count = 0;
	for (int i = 0; i < N; i++) {
		int value;
		cin >> value;
		heaptify(value, i);
		sum += value;
		arr_count[value + 4000]++;
		max_count = max_count > arr_count[value + 4000] ? max_count : arr_count[value + 4000];
	}
	sort(N - 1);
	if (sum < 0) {
		cout << (int)(sum / N - 0.5) << "\n";
	}
	else cout << (int)(sum / N + 0.5) << "\n";
	cout << arr[N / 2] << "\n";
	int count = 0;
	int idx = 0;
	for (int i = 0; i < 8001; i++) {
		if (max_count == arr_count[i]) {
			count++;
			idx = i;
			if (count == 2) {
				break;
			}
		}
	}
	cout << idx - 4000 << "\n";
	cout << arr[N-1] - arr[0] << "\n";
}